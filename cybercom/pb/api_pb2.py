# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import primitives_pb2 as primitives__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='api.proto',
  package='cybercom',
  syntax='proto3',
  serialized_pb=_b('\n\tapi.proto\x12\x08\x63ybercom\x1a\x10primitives.proto\"\x07\n\x05\x45mpty\"\x10\n\x02Id\x12\n\n\x02id\x18\x01 \x01(\x0c\"\x18\n\x06Serial\x12\x0e\n\x06serial\x18\x01 \x01(\x0c\"\xf0\x01\n\x06\x45ntity\x12\x18\n\x02id\x18\x01 \x01(\x0b\x32\x0c.cybercom.Id\x12%\n\x05state\x18\x02 \x01(\x0e\x32\x16.cybercom.Entity.State\x12\x1a\n\x03\x63sr\x18\x03 \x01(\x0b\x32\r.cybercom.CSR\x12\r\n\x05\x65mail\x18\x04 \x01(\t\x12\x11\n\tlongevity\x18\x05 \x01(\t\x12\x0f\n\x07\x65xpires\x18\x06 \x01(\x04\"V\n\x05State\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x0b\n\x07PENDING\x10\x01\x12\x0c\n\x08\x41PPROVED\x10\x02\x12\x0c\n\x08REJECTED\x10\x03\x12\x0b\n\x07REVOKED\x10\x04\x12\n\n\x06ONEOFF\x10\x05\"\xc5\x02\n\rConfiguration\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x41\n\x10request_template\x18\x02 \x01(\x0b\x32\'.cybercom.Configuration.RequestTemplate\x12!\n\x02\x63\x61\x18\x03 \x03(\x0b\x32\x15.cybercom.Certificate\x12#\n\x04peer\x18\x04 \x01(\x0b\x32\x15.cybercom.Certificate\x12 \n\x06\x65ntity\x18\x05 \x01(\x0b\x32\x10.cybercom.Entity\x1ay\n\x0fRequestTemplate\x12\x0f\n\x07\x63ountry\x18\x01 \x01(\t\x12\x14\n\x0corganization\x18\x02 \x01(\t\x12\x1b\n\x13organizational_unit\x18\x03 \x01(\t\x12\x10\n\x08locality\x18\x04 \x01(\t\x12\x10\n\x08province\x18\x05 \x01(\t2\xee\x05\n\x08\x43ybercom\x12>\n\x10GetConfiguration\x12\x0f.cybercom.Empty\x1a\x17.cybercom.Configuration\"\x00\x12-\n\x08Register\x12\r.cybercom.CSR\x1a\x10.cybercom.Entity\"\x00\x12-\n\tGetEntity\x12\x0c.cybercom.Id\x1a\x10.cybercom.Entity\"\x00\x12:\n\x0fGetCertificates\x12\x0c.cybercom.Id\x1a\x15.cybercom.Certificate\"\x00\x30\x01\x12\x37\n\x0eGetCertificate\x12\x0c.cybercom.Id\x1a\x15.cybercom.Certificate\"\x00\x12\x43\n\x16GetCertificateBySerial\x12\x10.cybercom.Serial\x1a\x15.cybercom.Certificate\"\x00\x12\x39\n\x11GetEntityBySerial\x12\x10.cybercom.Serial\x1a\x10.cybercom.Entity\"\x00\x12\x31\n\x05Renew\x12\x0f.cybercom.Empty\x1a\x15.cybercom.Certificate\"\x00\x12\x34\n\x0bGetEntities\x12\x0f.cybercom.Empty\x1a\x10.cybercom.Entity\"\x00\x30\x01\x12\x39\n\x10IssueCertificate\x12\x0c.cybercom.Id\x1a\x15.cybercom.Certificate\"\x00\x12\x36\n\x0eSetEntityState\x12\x10.cybercom.Entity\x1a\x10.cybercom.Entity\"\x00\x12:\n\x12SetEntityLongevity\x12\x10.cybercom.Entity\x1a\x10.cybercom.Entity\"\x00\x12\x37\n\x0fSetEntityExpiry\x12\x10.cybercom.Entity\x1a\x10.cybercom.Entity\"\x00\x42\x04Z\x02pbb\x06proto3')
  ,
  dependencies=[primitives__pb2.DESCRIPTOR,])



_ENTITY_STATE = _descriptor.EnumDescriptor(
  name='State',
  full_name='cybercom.Entity.State',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='UNKNOWN', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PENDING', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APPROVED', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REJECTED', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REVOKED', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ONEOFF', index=5, number=5,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=249,
  serialized_end=335,
)
_sym_db.RegisterEnumDescriptor(_ENTITY_STATE)


_EMPTY = _descriptor.Descriptor(
  name='Empty',
  full_name='cybercom.Empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=41,
  serialized_end=48,
)


_ID = _descriptor.Descriptor(
  name='Id',
  full_name='cybercom.Id',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='cybercom.Id.id', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=50,
  serialized_end=66,
)


_SERIAL = _descriptor.Descriptor(
  name='Serial',
  full_name='cybercom.Serial',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='serial', full_name='cybercom.Serial.serial', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=68,
  serialized_end=92,
)


_ENTITY = _descriptor.Descriptor(
  name='Entity',
  full_name='cybercom.Entity',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='cybercom.Entity.id', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='state', full_name='cybercom.Entity.state', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='csr', full_name='cybercom.Entity.csr', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='email', full_name='cybercom.Entity.email', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='longevity', full_name='cybercom.Entity.longevity', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='expires', full_name='cybercom.Entity.expires', index=5,
      number=6, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _ENTITY_STATE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=95,
  serialized_end=335,
)


_CONFIGURATION_REQUESTTEMPLATE = _descriptor.Descriptor(
  name='RequestTemplate',
  full_name='cybercom.Configuration.RequestTemplate',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='country', full_name='cybercom.Configuration.RequestTemplate.country', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='organization', full_name='cybercom.Configuration.RequestTemplate.organization', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='organizational_unit', full_name='cybercom.Configuration.RequestTemplate.organizational_unit', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='locality', full_name='cybercom.Configuration.RequestTemplate.locality', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='province', full_name='cybercom.Configuration.RequestTemplate.province', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=542,
  serialized_end=663,
)

_CONFIGURATION = _descriptor.Descriptor(
  name='Configuration',
  full_name='cybercom.Configuration',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='cybercom.Configuration.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='request_template', full_name='cybercom.Configuration.request_template', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ca', full_name='cybercom.Configuration.ca', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='peer', full_name='cybercom.Configuration.peer', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='entity', full_name='cybercom.Configuration.entity', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_CONFIGURATION_REQUESTTEMPLATE, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=338,
  serialized_end=663,
)

_ENTITY.fields_by_name['id'].message_type = _ID
_ENTITY.fields_by_name['state'].enum_type = _ENTITY_STATE
_ENTITY.fields_by_name['csr'].message_type = primitives__pb2._CSR
_ENTITY_STATE.containing_type = _ENTITY
_CONFIGURATION_REQUESTTEMPLATE.containing_type = _CONFIGURATION
_CONFIGURATION.fields_by_name['request_template'].message_type = _CONFIGURATION_REQUESTTEMPLATE
_CONFIGURATION.fields_by_name['ca'].message_type = primitives__pb2._CERTIFICATE
_CONFIGURATION.fields_by_name['peer'].message_type = primitives__pb2._CERTIFICATE
_CONFIGURATION.fields_by_name['entity'].message_type = _ENTITY
DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY
DESCRIPTOR.message_types_by_name['Id'] = _ID
DESCRIPTOR.message_types_by_name['Serial'] = _SERIAL
DESCRIPTOR.message_types_by_name['Entity'] = _ENTITY
DESCRIPTOR.message_types_by_name['Configuration'] = _CONFIGURATION
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'api_pb2'
  # @@protoc_insertion_point(class_scope:cybercom.Empty)
  ))
_sym_db.RegisterMessage(Empty)

Id = _reflection.GeneratedProtocolMessageType('Id', (_message.Message,), dict(
  DESCRIPTOR = _ID,
  __module__ = 'api_pb2'
  # @@protoc_insertion_point(class_scope:cybercom.Id)
  ))
_sym_db.RegisterMessage(Id)

Serial = _reflection.GeneratedProtocolMessageType('Serial', (_message.Message,), dict(
  DESCRIPTOR = _SERIAL,
  __module__ = 'api_pb2'
  # @@protoc_insertion_point(class_scope:cybercom.Serial)
  ))
_sym_db.RegisterMessage(Serial)

Entity = _reflection.GeneratedProtocolMessageType('Entity', (_message.Message,), dict(
  DESCRIPTOR = _ENTITY,
  __module__ = 'api_pb2'
  # @@protoc_insertion_point(class_scope:cybercom.Entity)
  ))
_sym_db.RegisterMessage(Entity)

Configuration = _reflection.GeneratedProtocolMessageType('Configuration', (_message.Message,), dict(

  RequestTemplate = _reflection.GeneratedProtocolMessageType('RequestTemplate', (_message.Message,), dict(
    DESCRIPTOR = _CONFIGURATION_REQUESTTEMPLATE,
    __module__ = 'api_pb2'
    # @@protoc_insertion_point(class_scope:cybercom.Configuration.RequestTemplate)
    ))
  ,
  DESCRIPTOR = _CONFIGURATION,
  __module__ = 'api_pb2'
  # @@protoc_insertion_point(class_scope:cybercom.Configuration)
  ))
_sym_db.RegisterMessage(Configuration)
_sym_db.RegisterMessage(Configuration.RequestTemplate)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('Z\002pb'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class CybercomStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetConfiguration = channel.unary_unary(
          '/cybercom.Cybercom/GetConfiguration',
          request_serializer=Empty.SerializeToString,
          response_deserializer=Configuration.FromString,
          )
      self.Register = channel.unary_unary(
          '/cybercom.Cybercom/Register',
          request_serializer=primitives__pb2.CSR.SerializeToString,
          response_deserializer=Entity.FromString,
          )
      self.GetEntity = channel.unary_unary(
          '/cybercom.Cybercom/GetEntity',
          request_serializer=Id.SerializeToString,
          response_deserializer=Entity.FromString,
          )
      self.GetCertificates = channel.unary_stream(
          '/cybercom.Cybercom/GetCertificates',
          request_serializer=Id.SerializeToString,
          response_deserializer=primitives__pb2.Certificate.FromString,
          )
      self.GetCertificate = channel.unary_unary(
          '/cybercom.Cybercom/GetCertificate',
          request_serializer=Id.SerializeToString,
          response_deserializer=primitives__pb2.Certificate.FromString,
          )
      self.GetCertificateBySerial = channel.unary_unary(
          '/cybercom.Cybercom/GetCertificateBySerial',
          request_serializer=Serial.SerializeToString,
          response_deserializer=primitives__pb2.Certificate.FromString,
          )
      self.GetEntityBySerial = channel.unary_unary(
          '/cybercom.Cybercom/GetEntityBySerial',
          request_serializer=Serial.SerializeToString,
          response_deserializer=Entity.FromString,
          )
      self.Renew = channel.unary_unary(
          '/cybercom.Cybercom/Renew',
          request_serializer=Empty.SerializeToString,
          response_deserializer=primitives__pb2.Certificate.FromString,
          )
      self.GetEntities = channel.unary_stream(
          '/cybercom.Cybercom/GetEntities',
          request_serializer=Empty.SerializeToString,
          response_deserializer=Entity.FromString,
          )
      self.IssueCertificate = channel.unary_unary(
          '/cybercom.Cybercom/IssueCertificate',
          request_serializer=Id.SerializeToString,
          response_deserializer=primitives__pb2.Certificate.FromString,
          )
      self.SetEntityState = channel.unary_unary(
          '/cybercom.Cybercom/SetEntityState',
          request_serializer=Entity.SerializeToString,
          response_deserializer=Entity.FromString,
          )
      self.SetEntityLongevity = channel.unary_unary(
          '/cybercom.Cybercom/SetEntityLongevity',
          request_serializer=Entity.SerializeToString,
          response_deserializer=Entity.FromString,
          )
      self.SetEntityExpiry = channel.unary_unary(
          '/cybercom.Cybercom/SetEntityExpiry',
          request_serializer=Entity.SerializeToString,
          response_deserializer=Entity.FromString,
          )


  class CybercomServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def GetConfiguration(self, request, context):
      """Get a Cybercom configuration
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
      """Submimt a CSR for processing later, returning the Entity ID
      that the management layer will use as well.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetEntity(self, request, context):
      """Get an entity and their information based on their Entity ID
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetCertificates(self, request, context):
      """Given an Entity ID, return a stream of Certificates which have
      been issued to that client.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetCertificate(self, request, context):
      """Given an Entity ID, return the current Certificate for the
      user.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetCertificateBySerial(self, request, context):
      """Given a Serial, return the Certifciate that was issued
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetEntityBySerial(self, request, context):
      """Get the Entity for the given Certificate by its Serial
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Renew(self, request, context):
      """Get a new Certificate for the client on the other end of the TLS
      connection. If a Certificate is valid, and the Entity is valid, this
      will trigger a new Certificate to be issued.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetEntities(self, request, context):
      """Get all entities known to the system.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def IssueCertificate(self, request, context):
      """Issue Certificate for an Entity.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetEntityState(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetEntityLongevity(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetEntityExpiry(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_CybercomServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetConfiguration': grpc.unary_unary_rpc_method_handler(
            servicer.GetConfiguration,
            request_deserializer=Empty.FromString,
            response_serializer=Configuration.SerializeToString,
        ),
        'Register': grpc.unary_unary_rpc_method_handler(
            servicer.Register,
            request_deserializer=primitives__pb2.CSR.FromString,
            response_serializer=Entity.SerializeToString,
        ),
        'GetEntity': grpc.unary_unary_rpc_method_handler(
            servicer.GetEntity,
            request_deserializer=Id.FromString,
            response_serializer=Entity.SerializeToString,
        ),
        'GetCertificates': grpc.unary_stream_rpc_method_handler(
            servicer.GetCertificates,
            request_deserializer=Id.FromString,
            response_serializer=primitives__pb2.Certificate.SerializeToString,
        ),
        'GetCertificate': grpc.unary_unary_rpc_method_handler(
            servicer.GetCertificate,
            request_deserializer=Id.FromString,
            response_serializer=primitives__pb2.Certificate.SerializeToString,
        ),
        'GetCertificateBySerial': grpc.unary_unary_rpc_method_handler(
            servicer.GetCertificateBySerial,
            request_deserializer=Serial.FromString,
            response_serializer=primitives__pb2.Certificate.SerializeToString,
        ),
        'GetEntityBySerial': grpc.unary_unary_rpc_method_handler(
            servicer.GetEntityBySerial,
            request_deserializer=Serial.FromString,
            response_serializer=Entity.SerializeToString,
        ),
        'Renew': grpc.unary_unary_rpc_method_handler(
            servicer.Renew,
            request_deserializer=Empty.FromString,
            response_serializer=primitives__pb2.Certificate.SerializeToString,
        ),
        'GetEntities': grpc.unary_stream_rpc_method_handler(
            servicer.GetEntities,
            request_deserializer=Empty.FromString,
            response_serializer=Entity.SerializeToString,
        ),
        'IssueCertificate': grpc.unary_unary_rpc_method_handler(
            servicer.IssueCertificate,
            request_deserializer=Id.FromString,
            response_serializer=primitives__pb2.Certificate.SerializeToString,
        ),
        'SetEntityState': grpc.unary_unary_rpc_method_handler(
            servicer.SetEntityState,
            request_deserializer=Entity.FromString,
            response_serializer=Entity.SerializeToString,
        ),
        'SetEntityLongevity': grpc.unary_unary_rpc_method_handler(
            servicer.SetEntityLongevity,
            request_deserializer=Entity.FromString,
            response_serializer=Entity.SerializeToString,
        ),
        'SetEntityExpiry': grpc.unary_unary_rpc_method_handler(
            servicer.SetEntityExpiry,
            request_deserializer=Entity.FromString,
            response_serializer=Entity.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'cybercom.Cybercom', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaCybercomServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def GetConfiguration(self, request, context):
      """Get a Cybercom configuration
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Register(self, request, context):
      """Submimt a CSR for processing later, returning the Entity ID
      that the management layer will use as well.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetEntity(self, request, context):
      """Get an entity and their information based on their Entity ID
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetCertificates(self, request, context):
      """Given an Entity ID, return a stream of Certificates which have
      been issued to that client.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetCertificate(self, request, context):
      """Given an Entity ID, return the current Certificate for the
      user.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetCertificateBySerial(self, request, context):
      """Given a Serial, return the Certifciate that was issued
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetEntityBySerial(self, request, context):
      """Get the Entity for the given Certificate by its Serial
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Renew(self, request, context):
      """Get a new Certificate for the client on the other end of the TLS
      connection. If a Certificate is valid, and the Entity is valid, this
      will trigger a new Certificate to be issued.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetEntities(self, request, context):
      """Get all entities known to the system.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def IssueCertificate(self, request, context):
      """Issue Certificate for an Entity.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetEntityState(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetEntityLongevity(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetEntityExpiry(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaCybercomStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def GetConfiguration(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get a Cybercom configuration
      """
      raise NotImplementedError()
    GetConfiguration.future = None
    def Register(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Submimt a CSR for processing later, returning the Entity ID
      that the management layer will use as well.
      """
      raise NotImplementedError()
    Register.future = None
    def GetEntity(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get an entity and their information based on their Entity ID
      """
      raise NotImplementedError()
    GetEntity.future = None
    def GetCertificates(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Given an Entity ID, return a stream of Certificates which have
      been issued to that client.
      """
      raise NotImplementedError()
    def GetCertificate(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Given an Entity ID, return the current Certificate for the
      user.
      """
      raise NotImplementedError()
    GetCertificate.future = None
    def GetCertificateBySerial(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Given a Serial, return the Certifciate that was issued
      """
      raise NotImplementedError()
    GetCertificateBySerial.future = None
    def GetEntityBySerial(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get the Entity for the given Certificate by its Serial
      """
      raise NotImplementedError()
    GetEntityBySerial.future = None
    def Renew(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get a new Certificate for the client on the other end of the TLS
      connection. If a Certificate is valid, and the Entity is valid, this
      will trigger a new Certificate to be issued.
      """
      raise NotImplementedError()
    Renew.future = None
    def GetEntities(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Get all entities known to the system.
      """
      raise NotImplementedError()
    def IssueCertificate(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Issue Certificate for an Entity.
      """
      raise NotImplementedError()
    IssueCertificate.future = None
    def SetEntityState(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    SetEntityState.future = None
    def SetEntityLongevity(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    SetEntityLongevity.future = None
    def SetEntityExpiry(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    SetEntityExpiry.future = None


  def beta_create_Cybercom_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('cybercom.Cybercom', 'GetCertificate'): Id.FromString,
      ('cybercom.Cybercom', 'GetCertificateBySerial'): Serial.FromString,
      ('cybercom.Cybercom', 'GetCertificates'): Id.FromString,
      ('cybercom.Cybercom', 'GetConfiguration'): Empty.FromString,
      ('cybercom.Cybercom', 'GetEntities'): Empty.FromString,
      ('cybercom.Cybercom', 'GetEntity'): Id.FromString,
      ('cybercom.Cybercom', 'GetEntityBySerial'): Serial.FromString,
      ('cybercom.Cybercom', 'IssueCertificate'): Id.FromString,
      ('cybercom.Cybercom', 'Register'): primitives__pb2.CSR.FromString,
      ('cybercom.Cybercom', 'Renew'): Empty.FromString,
      ('cybercom.Cybercom', 'SetEntityExpiry'): Entity.FromString,
      ('cybercom.Cybercom', 'SetEntityLongevity'): Entity.FromString,
      ('cybercom.Cybercom', 'SetEntityState'): Entity.FromString,
    }
    response_serializers = {
      ('cybercom.Cybercom', 'GetCertificate'): primitives__pb2.Certificate.SerializeToString,
      ('cybercom.Cybercom', 'GetCertificateBySerial'): primitives__pb2.Certificate.SerializeToString,
      ('cybercom.Cybercom', 'GetCertificates'): primitives__pb2.Certificate.SerializeToString,
      ('cybercom.Cybercom', 'GetConfiguration'): Configuration.SerializeToString,
      ('cybercom.Cybercom', 'GetEntities'): Entity.SerializeToString,
      ('cybercom.Cybercom', 'GetEntity'): Entity.SerializeToString,
      ('cybercom.Cybercom', 'GetEntityBySerial'): Entity.SerializeToString,
      ('cybercom.Cybercom', 'IssueCertificate'): primitives__pb2.Certificate.SerializeToString,
      ('cybercom.Cybercom', 'Register'): Entity.SerializeToString,
      ('cybercom.Cybercom', 'Renew'): primitives__pb2.Certificate.SerializeToString,
      ('cybercom.Cybercom', 'SetEntityExpiry'): Entity.SerializeToString,
      ('cybercom.Cybercom', 'SetEntityLongevity'): Entity.SerializeToString,
      ('cybercom.Cybercom', 'SetEntityState'): Entity.SerializeToString,
    }
    method_implementations = {
      ('cybercom.Cybercom', 'GetCertificate'): face_utilities.unary_unary_inline(servicer.GetCertificate),
      ('cybercom.Cybercom', 'GetCertificateBySerial'): face_utilities.unary_unary_inline(servicer.GetCertificateBySerial),
      ('cybercom.Cybercom', 'GetCertificates'): face_utilities.unary_stream_inline(servicer.GetCertificates),
      ('cybercom.Cybercom', 'GetConfiguration'): face_utilities.unary_unary_inline(servicer.GetConfiguration),
      ('cybercom.Cybercom', 'GetEntities'): face_utilities.unary_stream_inline(servicer.GetEntities),
      ('cybercom.Cybercom', 'GetEntity'): face_utilities.unary_unary_inline(servicer.GetEntity),
      ('cybercom.Cybercom', 'GetEntityBySerial'): face_utilities.unary_unary_inline(servicer.GetEntityBySerial),
      ('cybercom.Cybercom', 'IssueCertificate'): face_utilities.unary_unary_inline(servicer.IssueCertificate),
      ('cybercom.Cybercom', 'Register'): face_utilities.unary_unary_inline(servicer.Register),
      ('cybercom.Cybercom', 'Renew'): face_utilities.unary_unary_inline(servicer.Renew),
      ('cybercom.Cybercom', 'SetEntityExpiry'): face_utilities.unary_unary_inline(servicer.SetEntityExpiry),
      ('cybercom.Cybercom', 'SetEntityLongevity'): face_utilities.unary_unary_inline(servicer.SetEntityLongevity),
      ('cybercom.Cybercom', 'SetEntityState'): face_utilities.unary_unary_inline(servicer.SetEntityState),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Cybercom_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('cybercom.Cybercom', 'GetCertificate'): Id.SerializeToString,
      ('cybercom.Cybercom', 'GetCertificateBySerial'): Serial.SerializeToString,
      ('cybercom.Cybercom', 'GetCertificates'): Id.SerializeToString,
      ('cybercom.Cybercom', 'GetConfiguration'): Empty.SerializeToString,
      ('cybercom.Cybercom', 'GetEntities'): Empty.SerializeToString,
      ('cybercom.Cybercom', 'GetEntity'): Id.SerializeToString,
      ('cybercom.Cybercom', 'GetEntityBySerial'): Serial.SerializeToString,
      ('cybercom.Cybercom', 'IssueCertificate'): Id.SerializeToString,
      ('cybercom.Cybercom', 'Register'): primitives__pb2.CSR.SerializeToString,
      ('cybercom.Cybercom', 'Renew'): Empty.SerializeToString,
      ('cybercom.Cybercom', 'SetEntityExpiry'): Entity.SerializeToString,
      ('cybercom.Cybercom', 'SetEntityLongevity'): Entity.SerializeToString,
      ('cybercom.Cybercom', 'SetEntityState'): Entity.SerializeToString,
    }
    response_deserializers = {
      ('cybercom.Cybercom', 'GetCertificate'): primitives__pb2.Certificate.FromString,
      ('cybercom.Cybercom', 'GetCertificateBySerial'): primitives__pb2.Certificate.FromString,
      ('cybercom.Cybercom', 'GetCertificates'): primitives__pb2.Certificate.FromString,
      ('cybercom.Cybercom', 'GetConfiguration'): Configuration.FromString,
      ('cybercom.Cybercom', 'GetEntities'): Entity.FromString,
      ('cybercom.Cybercom', 'GetEntity'): Entity.FromString,
      ('cybercom.Cybercom', 'GetEntityBySerial'): Entity.FromString,
      ('cybercom.Cybercom', 'IssueCertificate'): primitives__pb2.Certificate.FromString,
      ('cybercom.Cybercom', 'Register'): Entity.FromString,
      ('cybercom.Cybercom', 'Renew'): primitives__pb2.Certificate.FromString,
      ('cybercom.Cybercom', 'SetEntityExpiry'): Entity.FromString,
      ('cybercom.Cybercom', 'SetEntityLongevity'): Entity.FromString,
      ('cybercom.Cybercom', 'SetEntityState'): Entity.FromString,
    }
    cardinalities = {
      'GetCertificate': cardinality.Cardinality.UNARY_UNARY,
      'GetCertificateBySerial': cardinality.Cardinality.UNARY_UNARY,
      'GetCertificates': cardinality.Cardinality.UNARY_STREAM,
      'GetConfiguration': cardinality.Cardinality.UNARY_UNARY,
      'GetEntities': cardinality.Cardinality.UNARY_STREAM,
      'GetEntity': cardinality.Cardinality.UNARY_UNARY,
      'GetEntityBySerial': cardinality.Cardinality.UNARY_UNARY,
      'IssueCertificate': cardinality.Cardinality.UNARY_UNARY,
      'Register': cardinality.Cardinality.UNARY_UNARY,
      'Renew': cardinality.Cardinality.UNARY_UNARY,
      'SetEntityExpiry': cardinality.Cardinality.UNARY_UNARY,
      'SetEntityLongevity': cardinality.Cardinality.UNARY_UNARY,
      'SetEntityState': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'cybercom.Cybercom', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
