# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import api_pb2 as api__pb2
import primitives_pb2 as primitives__pb2


class CybercomStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetConfiguration = channel.unary_unary(
        '/cybercom.Cybercom/GetConfiguration',
        request_serializer=api__pb2.Empty.SerializeToString,
        response_deserializer=api__pb2.Configuration.FromString,
        )
    self.Register = channel.unary_unary(
        '/cybercom.Cybercom/Register',
        request_serializer=primitives__pb2.CSR.SerializeToString,
        response_deserializer=api__pb2.Entity.FromString,
        )
    self.GetEntity = channel.unary_unary(
        '/cybercom.Cybercom/GetEntity',
        request_serializer=api__pb2.Id.SerializeToString,
        response_deserializer=api__pb2.Entity.FromString,
        )
    self.GetCertificates = channel.unary_stream(
        '/cybercom.Cybercom/GetCertificates',
        request_serializer=api__pb2.Id.SerializeToString,
        response_deserializer=primitives__pb2.Certificate.FromString,
        )
    self.GetCertificate = channel.unary_unary(
        '/cybercom.Cybercom/GetCertificate',
        request_serializer=api__pb2.Id.SerializeToString,
        response_deserializer=primitives__pb2.Certificate.FromString,
        )
    self.GetCertificateBySerial = channel.unary_unary(
        '/cybercom.Cybercom/GetCertificateBySerial',
        request_serializer=api__pb2.Serial.SerializeToString,
        response_deserializer=primitives__pb2.Certificate.FromString,
        )
    self.GetEntityBySerial = channel.unary_unary(
        '/cybercom.Cybercom/GetEntityBySerial',
        request_serializer=api__pb2.Serial.SerializeToString,
        response_deserializer=api__pb2.Entity.FromString,
        )
    self.Renew = channel.unary_unary(
        '/cybercom.Cybercom/Renew',
        request_serializer=api__pb2.Empty.SerializeToString,
        response_deserializer=primitives__pb2.Certificate.FromString,
        )
    self.GetEntities = channel.unary_stream(
        '/cybercom.Cybercom/GetEntities',
        request_serializer=api__pb2.Empty.SerializeToString,
        response_deserializer=api__pb2.Entity.FromString,
        )
    self.IssueCertificate = channel.unary_unary(
        '/cybercom.Cybercom/IssueCertificate',
        request_serializer=api__pb2.Id.SerializeToString,
        response_deserializer=primitives__pb2.Certificate.FromString,
        )
    self.SetEntityState = channel.unary_unary(
        '/cybercom.Cybercom/SetEntityState',
        request_serializer=api__pb2.Entity.SerializeToString,
        response_deserializer=api__pb2.Entity.FromString,
        )
    self.SetEntityLongevity = channel.unary_unary(
        '/cybercom.Cybercom/SetEntityLongevity',
        request_serializer=api__pb2.Entity.SerializeToString,
        response_deserializer=api__pb2.Entity.FromString,
        )
    self.SetEntityExpiry = channel.unary_unary(
        '/cybercom.Cybercom/SetEntityExpiry',
        request_serializer=api__pb2.Entity.SerializeToString,
        response_deserializer=api__pb2.Entity.FromString,
        )


class CybercomServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetConfiguration(self, request, context):
    """Get a Cybercom configuration
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Register(self, request, context):
    """Submimt a CSR for processing later, returning the Entity ID
    that the management layer will use as well.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetEntity(self, request, context):
    """Get an entity and their information based on their Entity ID
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetCertificates(self, request, context):
    """Given an Entity ID, return a stream of Certificates which have
    been issued to that client.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetCertificate(self, request, context):
    """Given an Entity ID, return the current Certificate for the
    user.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetCertificateBySerial(self, request, context):
    """Given a Serial, return the Certifciate that was issued
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetEntityBySerial(self, request, context):
    """Get the Entity for the given Certificate by its Serial
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Renew(self, request, context):
    """Get a new Certificate for the client on the other end of the TLS
    connection. If a Certificate is valid, and the Entity is valid, this
    will trigger a new Certificate to be issued.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetEntities(self, request, context):
    """Get all entities known to the system.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def IssueCertificate(self, request, context):
    """Issue Certificate for an Entity.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetEntityState(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetEntityLongevity(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetEntityExpiry(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CybercomServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetConfiguration': grpc.unary_unary_rpc_method_handler(
          servicer.GetConfiguration,
          request_deserializer=api__pb2.Empty.FromString,
          response_serializer=api__pb2.Configuration.SerializeToString,
      ),
      'Register': grpc.unary_unary_rpc_method_handler(
          servicer.Register,
          request_deserializer=primitives__pb2.CSR.FromString,
          response_serializer=api__pb2.Entity.SerializeToString,
      ),
      'GetEntity': grpc.unary_unary_rpc_method_handler(
          servicer.GetEntity,
          request_deserializer=api__pb2.Id.FromString,
          response_serializer=api__pb2.Entity.SerializeToString,
      ),
      'GetCertificates': grpc.unary_stream_rpc_method_handler(
          servicer.GetCertificates,
          request_deserializer=api__pb2.Id.FromString,
          response_serializer=primitives__pb2.Certificate.SerializeToString,
      ),
      'GetCertificate': grpc.unary_unary_rpc_method_handler(
          servicer.GetCertificate,
          request_deserializer=api__pb2.Id.FromString,
          response_serializer=primitives__pb2.Certificate.SerializeToString,
      ),
      'GetCertificateBySerial': grpc.unary_unary_rpc_method_handler(
          servicer.GetCertificateBySerial,
          request_deserializer=api__pb2.Serial.FromString,
          response_serializer=primitives__pb2.Certificate.SerializeToString,
      ),
      'GetEntityBySerial': grpc.unary_unary_rpc_method_handler(
          servicer.GetEntityBySerial,
          request_deserializer=api__pb2.Serial.FromString,
          response_serializer=api__pb2.Entity.SerializeToString,
      ),
      'Renew': grpc.unary_unary_rpc_method_handler(
          servicer.Renew,
          request_deserializer=api__pb2.Empty.FromString,
          response_serializer=primitives__pb2.Certificate.SerializeToString,
      ),
      'GetEntities': grpc.unary_stream_rpc_method_handler(
          servicer.GetEntities,
          request_deserializer=api__pb2.Empty.FromString,
          response_serializer=api__pb2.Entity.SerializeToString,
      ),
      'IssueCertificate': grpc.unary_unary_rpc_method_handler(
          servicer.IssueCertificate,
          request_deserializer=api__pb2.Id.FromString,
          response_serializer=primitives__pb2.Certificate.SerializeToString,
      ),
      'SetEntityState': grpc.unary_unary_rpc_method_handler(
          servicer.SetEntityState,
          request_deserializer=api__pb2.Entity.FromString,
          response_serializer=api__pb2.Entity.SerializeToString,
      ),
      'SetEntityLongevity': grpc.unary_unary_rpc_method_handler(
          servicer.SetEntityLongevity,
          request_deserializer=api__pb2.Entity.FromString,
          response_serializer=api__pb2.Entity.SerializeToString,
      ),
      'SetEntityExpiry': grpc.unary_unary_rpc_method_handler(
          servicer.SetEntityExpiry,
          request_deserializer=api__pb2.Entity.FromString,
          response_serializer=api__pb2.Entity.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'cybercom.Cybercom', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
